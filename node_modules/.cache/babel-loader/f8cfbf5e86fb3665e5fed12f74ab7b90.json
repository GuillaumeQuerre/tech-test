{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\test\\\\tech-test\\\\src\\\\SelectCharacter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { CHARACTERS_RICKMORTY } from './gqlClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SelectCharacter() {\n  _s();\n\n  var _data$episodes, _data$episodes$result;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CHARACTERS_RICKMORTY);\n  const [character, setCharacter] = useState(null);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error : (\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  console.log(data);\n\n  function selectEpisode(selectedEpisode) {\n    let value = selectedEpisode;\n    console.log(value); // setCharacter(data.episodes.results.find((x: Episode) => x.id === value));\n\n    console.log(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SelectCharac\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      children: (_data$episodes = data.episodes) === null || _data$episodes === void 0 ? void 0 : (_data$episodes$result = _data$episodes.results) === null || _data$episodes$result === void 0 ? void 0 : _data$episodes$result.map((episode, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: episode.id,\n          children: [index, \" - \", episode.name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectCharacter, \"yS6qSOZeGzz+0+2aG9qi+Fzl92M=\", false, function () {\n  return [useQuery];\n});\n\n_c = SelectCharacter;\nexport { SelectCharacter };\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["C:/Code/test/tech-test/src/SelectCharacter.tsx"],"names":["useState","useQuery","CHARACTERS_RICKMORTY","SelectCharacter","loading","error","data","character","setCharacter","console","log","selectEpisode","selectedEpisode","value","episodes","results","map","episode","index","id","name"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,oBAAT,QAAqC,aAArC;;;AA4BA,SAASC,eAAT,GAA2B;AAAA;;AAAA;;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACC,oBAAD,CAAzC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAmB,IAAnB,CAA1C;AACA,MAAII,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACXI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AAEA,WAASK,aAAT,CAAuBC,eAAvB,EAAiD;AAC7C,QAAIC,KAAK,GAAGD,eAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ,EAF6C,CAG7C;;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACI;AAAA,kCACKP,IAAI,CAACQ,QADV,4EACK,eAAeC,OADpB,0DACK,sBAAwBC,GAAxB,CAA4B,CAACC,OAAD,EAAmBC,KAAnB,KAAqC;AAC9D,4BAAQ;AAAQ,UAAA,KAAK,EAAED,OAAO,CAACE,EAAvB;AAAA,qBAAyCD,KAAzC,SAAmDD,OAAO,CAACG,IAA3D;AAAA,WAAgCF,KAAhC;AAAA;AAAA;AAAA;AAAA,gBAAR;AACH,OAFA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAvBQf,e;UAC4BF,Q;;;KAD5BE,e;AAwBT,SAASA,eAAT","sourcesContent":["import { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { CHARACTERS_RICKMORTY } from './gqlClient'\r\n\r\ntype Episodes = {\r\n    info: Info;\r\n    results: Episode[];\r\n}\r\n\r\ntype Info = {\r\n    count: number;\r\n    pages: number;\r\n    next: number;\r\n    prev: number;\r\n\r\n}\r\ntype Character = {\r\n    id: number;\r\n    name: string;\r\n    species: string;\r\n    image: string;\r\n}\r\n\r\ntype Episode = {\r\n    id: number;\r\n    name: string;\r\n    species: string;\r\n    image: string;\r\n}\r\n\r\nfunction SelectCharacter() {\r\n    const { loading, error, data } = useQuery(CHARACTERS_RICKMORTY);\r\n    const [character, setCharacter] = useState<Character | null>(null);\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error : (</p>;\r\n    console.log(data);\r\n\r\n    function selectEpisode(selectedEpisode: Episode) {\r\n        let value = selectedEpisode;\r\n        console.log(value);\r\n        // setCharacter(data.episodes.results.find((x: Episode) => x.id === value));\r\n        console.log(value);\r\n    }\r\n    return (\r\n        <div className=\"SelectCharac\">\r\n            <select>\r\n                {data.episodes?.results?.map((episode: Episode, index: number) => {\r\n                    return (<option value={episode.id} key={index} >{index} - {episode.name}</option>)\r\n                })\r\n                }\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\nexport { SelectCharacter }"]},"metadata":{},"sourceType":"module"}