{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\test\\\\tech-test\\\\src\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: ' https://rickandmortyapi.com/graphql ',\n  cache: new InMemoryCache()\n});\nconst CHARACTERS_RICKMORTY = gql`\n  query CHARACTERS {\n    characters() {\n      info {\n        count\n      }\n      results {\n        name\n      }\n    }\n    location(id: 1) {\n      id\n    }\n    episodesByIds(ids: [1, 2]) {\n      id\n    }\n  }\n  }\n`;\n\nfunction ExchangeRates() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CHARACTERS_RICKMORTY);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }, this);\n  console.log(data);\n}\n\n_s(ExchangeRates, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = ExchangeRates;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"ExchangeRates\");","map":{"version":3,"sources":["C:/Code/test/tech-test/src/index.tsx"],"names":["React","ReactDOM","App","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","CHARACTERS_RICKMORTY","ExchangeRates","loading","error","data","console","log","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;;AAQA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,uCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMO,oBAAoB,GAAGJ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;;AAoBA,SAASK,aAAT,GAAyB;AAAA;;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACK,oBAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACXE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD;;GANQH,a;UAC0BN,Q;;;KAD1BM,a;AAQTZ,QAAQ,CAACkB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEV,MAAxB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEW,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACAlB,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: ' https://rickandmortyapi.com/graphql ',\n  cache: new InMemoryCache()\n});\n\nconst CHARACTERS_RICKMORTY = gql`\n  query CHARACTERS {\n    characters() {\n      info {\n        count\n      }\n      results {\n        name\n      }\n    }\n    location(id: 1) {\n      id\n    }\n    episodesByIds(ids: [1, 2]) {\n      id\n    }\n  }\n  }\n`;\n\nfunction ExchangeRates() {\n  const { loading, error, data } = useQuery(CHARACTERS_RICKMORTY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  console.log(data);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}