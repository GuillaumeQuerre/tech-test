{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\test\\\\tech-test\\\\src\\\\gqlClient.tsx\",\n    _s = $RefreshSig$();\n\nimport { ApolloClient, InMemoryCache, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: ' https://rickandmortyapi.com/graphql ',\n  cache: new InMemoryCache()\n});\nconst CHARACTERS_RICKMORTY = gql`\n    query CHARACTERS {\n      characters() {\n        info {\n          count\n        }\n        results {\n          name\n        }\n      }\n      location(id: 1) {\n        id\n      }\n      episodesByIds(ids: [1, 2]) {\n        id\n      }\n    }\n    }\n  `;\n\nfunction GetCharac() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CHARACTERS_RICKMORTY);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error : (\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 21\n  }, this);\n  console.log(data);\n}\n\n_s(GetCharac, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetCharac;\nexport { client };\nexport { GetCharac };\n\nvar _c;\n\n$RefreshReg$(_c, \"GetCharac\");","map":{"version":3,"sources":["C:/Code/test/tech-test/src/gqlClient.tsx"],"names":["ApolloClient","InMemoryCache","useQuery","gql","client","uri","cache","CHARACTERS_RICKMORTY","GetCharac","loading","error","data","console","log"],"mappings":";;;AACA,SACEA,YADF,EAEEC,aAFF,EAGEC,QAHF,EAIEC,GAJF,QAKO,gBALP;;AAOA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE,uCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIL,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMM,oBAAoB,GAAGJ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAlBA;;AAoBA,SAASK,SAAT,GAAqB;AAAA;;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACK,oBAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACXE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD;;GANQH,S;UAC0BN,Q;;;KAD1BM,S;AAQT,SAASJ,MAAT;AACA,SAASI,SAAT","sourcesContent":["\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  useQuery,\r\n  gql\r\n} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: ' https://rickandmortyapi.com/graphql ',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst CHARACTERS_RICKMORTY = gql`\r\n    query CHARACTERS {\r\n      characters() {\r\n        info {\r\n          count\r\n        }\r\n        results {\r\n          name\r\n        }\r\n      }\r\n      location(id: 1) {\r\n        id\r\n      }\r\n      episodesByIds(ids: [1, 2]) {\r\n        id\r\n      }\r\n    }\r\n    }\r\n  `;\r\n\r\nfunction GetCharac() {\r\n  const { loading, error, data } = useQuery(CHARACTERS_RICKMORTY);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error : (</p>;\r\n  console.log(data);\r\n}\r\n\r\nexport { client };\r\nexport { GetCharac };"]},"metadata":{},"sourceType":"module"}